@page "/Vagtplan"
@using Musikfestival.Shared.Models
@using MongoDB.Bson
@using MongoDB.Driver
@inject HttpClient Http;
@inject Blazored.LocalStorage.ILocalStorageService localStore

<PageTitle>Vagtplan</PageTitle>
<style>
    h5 {
        color: white
    }
    h3 {
        color: white;
    }
    th {
        color: white;
    }
    td {
        color: #000000;
    }
    body {
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0;
        background-image: url('Billeder/baggrund_fade.png');
        background-size: cover;
        background-position: center;
    }
</style>


@if (vagterne == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="text-align: right;">
    <h5>Sorter Efter</h5>
            <button @onclick="() => SorterDato()" type="submit" class="btn btn-primary" style="color:white; background-color: #061C59;">Dato</button>
            <button @onclick="() => SorterPrioritet()" type="submit" class="btn btn-primary" style="color:white; background-color: #061C59;">Prioritet</button>
            <button @onclick="() => SorterAntal()" type="submit" class="btn btn-primary" style="color:white; background-color: #061C59;">Antal</button>
    </div>

    @if (vagterne.Any()) // Vis kun tabellen, hvis der er nogen vagter tilbage
    {
        <br /><h3>Tilgængelige vagter</h3>
        <table class="table">
            <thead>
                <tr>
                    <!-- Header cells for den øverste liste -->
                    <th >Dato</th>
                    <th>Lokation</th>
                    <th>Prioritet</th>
                    <th>Opgave</th>
                    <th>Antal</th>
                    <th>Beskrivlse</th>
                    <th>Start</th>
                    <th>Slut</th>
                    <th>Tilføj vagt</th>
                </tr>
            </thead>
            <tbody style="background-color: #FFFFFF">
                @foreach (var vagter in vagterne)
                {
                    <tr style="@(vagter.Antal == 0 ? "background-color: red;" : "")">
                        <td>@vagter.Dato</td>
                        <td>@vagter.Lokation</td>
                        <td>@vagter.Rangering</td>
                        <td>@vagter.Type</td>
                        <td>@vagter.Antal</td>
                        <td>@vagter.Beskrivelse</td>
                        <td>@vagter.Start</td>
                        <td>@vagter.Slut</td>
                        <td>
                            @if (vagter.Antal == 0)
                            {
                                <p>Optaget</p>
                            }
                            else
                            {
                                <button @onclick="() => ListVagt(vagter)" style="color:white; background-color: #061C59;">Tag vagt</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <br /><h3>Du har valgt:</h3>
    <table class="table">
        <thead>
            @if (valgte.Any()) // Vis kun header cells, hvis der er valgte vagter
            {
                <tr>
                    <!-- Header cells for "Du har valgt" listen -->
                    <th>Dato</th>
                    <th>Lokation</th>
                    <th>Prioritet</th>
                    <th>Opgave</th>
                    <th>Antal</th>
                    <th>Beskrivlse</th>
                    <th>Start</th>
                    <th>Slut</th>
                    <th>Fjern vagt</th>
                </tr>
            }
        </thead>
        <tbody style="background-color: white">
            @foreach (var valgtVagt in valgte)
            {
                <tr>
                    <td>@valgtVagt.Dato</td>
                    <td>@valgtVagt.Lokation</td>
                    <td>@valgtVagt.Rangering</td>
                    <td>@valgtVagt.Type</td>
                    <td>@valgtVagt.Antal</td>
                    <td>@valgtVagt.Beskrivelse</td>
                    <td>@valgtVagt.Start</td>
                    <td>@valgtVagt.Slut</td>
                    <td>
                    <img src="Billeder/Delete.png" alt="Button Image" class="DeleteButton" style="width: 28px; height: 35px;" @onclick="() => FjernListedVagt(valgtVagt)"/>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @if (valgte.Any()){
        <button @onclick="HandleValidSubmit" style="color:white; background-color: #061C59;">Godkend din vagtplan</button>
}
}

<br />
<h3>Min Vagter</h3>
<table class="table">
    <thead>
            <tr>
                <th>Dato</th>
                <th>Lokation</th>
                <th>Prioritet</th>
                <th>Opgave</th>
                <th>Antal</th>
                <th>Beskrivlse</th>
                <th>Start</th>
                <th>Slut</th>
            </tr>
    </thead>
    <tbody style="background-color: #FFFFFF">
        @foreach (var MineVagter in MinVagt)
        {
            <tr>
                <td>@MineVagter.Dato</td>
                <td>@MineVagter.Lokation</td>
                <td>@MineVagter.Rangering</td>
                <td>@MineVagter.Type</td>
                <td>@MineVagter.Antal</td>
                <td>@MineVagter.Beskrivelse</td>
                <td>@MineVagter.Start</td>
                <td>@MineVagter.Slut</td>
                <td>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    // Initialiser Vagter objekter "vagterne" så de kan læses og printes ud i en liste fra vores database > vagter.
    private Vagter[]? vagterne;
    // Samt en liste af <Vagter> "valgte" så vi kan gemme objekterne og rykke rundt på dem på vagtplan siden.
    private List<Vagter> valgte = new List<Vagter>();
    private List<Vagter> MinVagt = new List<Vagter>();
    private bool sortAscendingByDato = true;
    private bool sortAscendingByRangering = true;
    private bool sortAscendingByAntal = true;

    Vagter vagter = new();
    Vagter MineVagter = new();

    private EditContext aEditContext;

    protected override async Task OnInitializedAsync()
    {
        aEditContext = new EditContext(vagter);
        vagterne = await Http.GetFromJsonAsync<Vagter[]>("/api/vagter");
    }

    public async Task Mine()
    {
        MinVagt = await Http.GetFromJsonAsync<List<Vagter>>("fordeling");
    }

    private void ListVagt(Vagter valgtVagt)
    {
        // Tilføj den valgte vagt til "Du har valgt" listen
        valgte.Add(valgtVagt);

        // Fjern den valgte vagt fra den øverste liste
        vagterne = vagterne.Where(v => v != valgtVagt).ToArray();
    }

    private void FjernListedVagt(Vagter valgtVagt)
    {
        // Fjern vagten fra "Du har valgt" listen
        valgte.Remove(valgtVagt);

        // Tilføj vagten tilbage til den øverste liste
        vagterne = vagterne.Append(valgtVagt).ToArray();
    }

    // Opret en ny instans af Vagter ved klik på HandleValidSubmit, og send hver af de valgte vagter til vores kollektion "fordeling"
    private string storedUsername;
    Vagter valgt = new();

    public async Task HandleValidSubmit()
    {
        storedUsername = await localStore.GetItemAsync<string>("username");

        foreach (var valgtVagt in valgte)
        {
            valgtVagt.Username = storedUsername;
            await Http.PostAsJsonAsync<Vagter>("fordeling", valgtVagt);
        }
    }










    //Sorter Funktioner
    private void SorterDato() //Dato
    {
        if (sortAscendingByDato)
        {
            vagterne = vagterne.OrderBy(Vagter => Vagter.Dato).ToArray(); //bestemer hvad det er der skal sorteres.
        }
        else
        {
            vagterne = vagterne.OrderByDescending(Vagter => Vagter.Dato).ToArray(); //bestemmer hvad det er der skal sorteres den anden vej/ved 2. klik.
        }

        sortAscendingByDato = !sortAscendingByDato; // Toggle/gemmer sortering.
    }

    private void SorterPrioritet() //Rangering/prioritet
    {
        if (sortAscendingByRangering)
        {
            vagterne = vagterne.OrderBy(Vagter => Vagter.Rangering).ToArray();
        }
        else
        {
            vagterne = vagterne.OrderByDescending(Vagter => Vagter.Rangering).ToArray();
        }

        sortAscendingByRangering = !sortAscendingByRangering;
    }

    private void SorterAntal()//Antal
    {
        if (sortAscendingByAntal)
        {
            vagterne = vagterne.OrderBy(Vagter => Vagter.Antal).ToArray();
        }
        else
        {
            vagterne = vagterne.OrderByDescending(Vagter => Vagter.Antal).ToArray();
        }

        sortAscendingByAntal = !sortAscendingByAntal;
    }
}