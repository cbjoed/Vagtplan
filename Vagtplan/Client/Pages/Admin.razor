@page "/koordinator"
@using Musikfestival.Shared.Models
@using MongoDB.Bson
@using MongoDB.Driver
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStore

<nav class="navbar2 fixed-top navbar-expand-lg navbar-light" style="background-color: #000000; height: 60px; display: flex; align-items: center;">
    <a> </a>
    <a class="navbar-brand" style="color: #ffffff; border-radius: 1em; padding: 0.4em 1em; background-color: #292929; font-size: 20px;" href="/profil">Min Profil</a>
</nav>

<link rel="stylesheet" href="css/UI/Admin.css" />
<style>
    h5 {
        color: white;
        text-align: right;
    }
    th {
        color: white;
    }

    td {
        color: #000000;
    }
    body {
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0;
        background-image: url('Billeder/baggrund_fade.png');
        background-size: cover;
        background-position: center;
    }
    p {
        color: white;
    }
</style>

@if (vagterne == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h5>Sorter Efter</h5>
    <div style="display: flex; justify-content: space-between;">
        <button @onclick="() => OpretVagt()" type="submit" class="btn btn-primary" style="color:white; background-color: #061C59;">Opret ny vagt</button>
        <div style="text-align: right;">
            <button @onclick="() => SorterDato()" type="submit" class="btn btn-primary" style="color:white; background-color: #061C59;">Dato</button>
            <button @onclick="() => SorterPrioritet()" type="submit" class="btn btn-primary" style="color:white; background-color: #061C59;">Prioritet</button>
            <button @onclick="() => SorterAntal()" type="submit" class="btn btn-primary" style="color:white; background-color: #061C59;">Antal</button>
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Dato</th>
                <th>Lokation</th>
                <th>Prioritet</th>
                <th>Opgave</th>
                <th>Antal</th>
                <th>Beskrivlse</th>
                <th>Start</th>
                <th>Slut</th>
            </tr>
        </thead>
        <tbody style="background-color: white">
            @foreach (var vagter in vagterne)
            {
                <tr>
                    <td>@vagter.Dato</td>
                    <td>@vagter.Lokation</td>
                    <td>@vagter.Rangering</td>
                    <td>@vagter.Type</td>
                    <td>@vagter.Antal</td>
                    <td>@vagter.Beskrivelse</td>
                    <td>@vagter.Start</td>
                    <td>@vagter.Slut</td>
                    <td>
                        @if (!isEditing || vagter != valgt)
                        {
                            <!-- Display non-editable fields -->
                            <img src="Billeder/Update.png" alt="Button Image" class="UpdateButton" style="width: 28px; height: 35px;" @onclick="() => StartEditing(vagter)" />
                            <img src="Billeder/Delete.png" alt="Button Image" class="DeleteButton" style="width: 28px; height: 35px;" @onclick="() => DeleteVagt(vagter.VagtId)" />
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Display input fields for editing -->
    @if (isEditing || isEditing2)
        {
            <div>
                <p>Dato: <input @bind="valgt.Dato" /></p>
                <p>Lokation: <input @bind="valgt.Lokation" /></p>
                <p>Prioritet: <input @bind="valgt.Rangering" /></p>
                <p>Type: <input @bind="valgt.Type" /></p>
                <p>Antal: <input @bind="valgt.Antal" /></p>
                <p>Beskrivelse: <input @bind="valgt.Beskrivelse" /></p>
                <p>Start: <input @bind="valgt.Start" /></p>
                <p>Slut: <input @bind="valgt.Slut" /></p>
                <p>VagtId: <input @bind="valgt.VagtId" /></p>
            @if (isEditing == true)
            {
                <button @onclick="() => UpdatePlan(valgt)" style="color:white; background-color: #061C59;">Gem</button>
            }
            else if (isEditing2 == true)
            {
                <button @onclick="() => CreatePlan(valgt)" style="color:white; background-color: #061C59;">Gem ny vagt</button>
            }
            <button @onclick="CancelEdit">Annuller</button>
        </div>
    }
}

@code {
    // Initialiser Vagter objekter "vagterne" så de respektive attributter kan læses og printes ud i en liste fra vores database > vagter.
    // Samt en liste af <Vagter> "valgte" så vi kan gemme objekterne og rykke rundt på dem på vagtplan siden.
    private Vagter[]? vagterne;
    private List<Vagter> valgte = new List<Vagter>();
    private bool sortAscendingByDato = true;
    private bool sortAscendingByRangering = true;
    private bool sortAscendingByAntal = true;

    private bool isEditing = false;
    private bool isEditing2 = false;
    private Vagter valgt = new Vagter();
    private void StartEditing(Vagter vagt)
    {

        valgt = vagt;
        isEditing = true;
        isEditing2 = true;

    }

    public void OpretVagt()
    {
        isEditing2 = true;
    }

    public void CancelEdit()
    {
        isEditing = false;
        isEditing2 = false;
    }

    Vagter ReadVagter = new();
    private EditContext aEditContext;

    protected override async Task OnInitializedAsync()
    {
        aEditContext = new EditContext(ReadVagter);
        vagterne = await Http.GetFromJsonAsync<Vagter[]>("/api/vagter");
    }

    Vagter nyvagt = new();
    
    private async Task CreatePlan(Vagter nyvagt)
    {
        await Http.PostAsJsonAsync<Vagter>("/api/vagter", nyvagt);

        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        isEditing2 = false;
    }

    // Opret en ny instans af Vagter ved klik på HandleValidSubmit, og send hver af de valgte vagter til vores kollektion "vagter"

    Vagter vagt = new();
    private async Task UpdatePlan(Vagter vagt)
    {
        var response = await Http.PutAsJsonAsync("/api/vagter", vagt);
        // Gem ændringer, f.eks. ved at sende dem til serveren

        if (response.IsSuccessStatusCode)
        {
            isEditing = false;
        }
    }

    private async Task DeleteVagt(int vagtId)
    {
        var response = await Http.DeleteAsync($"/api/vagter/{vagtId}");

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private void SorterDato()
    {
        if (sortAscendingByDato)
        {
            vagterne = vagterne.OrderBy(Vagter => Vagter.Dato).ToArray();
        }
        else
        {
            vagterne = vagterne.OrderByDescending(Vagter => Vagter.Dato).ToArray();
        }

        sortAscendingByDato = !sortAscendingByDato; // Toggle sorting order.
    }

    private void SorterPrioritet()
    {
        if (sortAscendingByRangering)
        {
            vagterne = vagterne.OrderBy(Vagter => Vagter.Rangering).ToArray();
        }
        else
        {
            vagterne = vagterne.OrderByDescending(Vagter => Vagter.Rangering).ToArray();
        }

        sortAscendingByRangering = !sortAscendingByRangering; // Toggle sorting order.
    }

    private void SorterAntal()
    {
        if (sortAscendingByAntal)
        {
            vagterne = vagterne.OrderBy(Vagter => Vagter.Antal).ToArray();
        }
        else
        {
            vagterne = vagterne.OrderByDescending(Vagter => Vagter.Antal).ToArray();
        }

        sortAscendingByAntal = !sortAscendingByAntal; // Toggle sorting order.
    }
}