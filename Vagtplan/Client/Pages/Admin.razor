@page "/koordinator"
@using Musikfestival.Shared.Models
@using MongoDB.Bson
@using MongoDB.Driver
@inject HttpClient Http;
@inject Blazored.LocalStorage.ILocalStorageService localStore

<PageTitle>Koordinatorside</PageTitle>

@if (vagterne == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <br />
    <h3>Alle vagter</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Dato</th>
                <th>Lokation</th>
                <th>Prioritet</th>
                <th>Opgave</th>
                <th>Antal</th>
                <th>Beskrivlse</th>
                <th>Start</th>
                <th>Slut</th>
                <th>Rediger vagt</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vagter in vagterne)
            {
                <tr>
                    <td>@vagter.Dato</td>
                    <td>@vagter.Lokation</td>
                    <td>@vagter.Rangering</td>
                    <td>@vagter.Type</td>
                    <td>@vagter.Antal</td>
                    <td>@vagter.Beskrivelse</td>
                    <td>@vagter.Start</td>
                    <td>
                        @if (isEditing && vagter == valgt)
                        {
                            <!-- Display input fields for editing -->
                            <p><b>Dato:</b> <input @bind="vagter.Dato" /></p>
                            <p><b>Lokation:</b> <input @bind="vagter.Lokation" /></p>
                            <p><b>Prioritet:</b> <input @bind="vagter.Rangering" /></p>
                            <!-- Add more input fields as needed -->
                        }
                        else
                        {
                            <!-- Display non-editable fields -->
                            <button @onclick="StartEditing">Rediger</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // Initialiser Vagter objekter "vagterne" så de kan læses og printes ud i en liste fra vores database > vagter.
    // Samt en liste af <Vagter> "valgte" så vi kan gemme objekterne og rykke rundt på dem på vagtplan siden.
    private Vagter[]? vagterne;
    private List<Vagter> valgte = new List<Vagter>();
    private bool isEditing = false; // Flag for at indikere, om redigering er aktiv

    Vagter vagter = new();

    private EditContext aEditContext;

    protected override async Task OnInitializedAsync()
    {
        aEditContext = new EditContext(vagter);
        vagterne = await Http.GetFromJsonAsync<Vagter[]>("/api/vagter");
    }

    private void StartEditing()
    {
        isEditing = true;

    }

    // Opret en ny instans af Vagter ved klik på HandleValidSubmit, og send hver af de valgte vagter til vores kollektion "fordeling"
    private string storedUsername;
    Vagter vagt = new();

    private async Task UpdatePlan(Vagter vagter)
    {
        var response = await Http.PutAsJsonAsync("/api/vagter", vagt);
        // Gem ændringer, f.eks. ved at sende dem til serveren

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Changes saved successfully.");
            isEditing = false;
        }
        else
        {
            Console.WriteLine("Failed to save changes.");
            // Handle the failure, e.g., show an error message
        }
    }
}